<?php

namespace ContainerV61y47y;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSecurity_Authenticator_JsonLogin_CustomerApiService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'security.authenticator.json_login.customer_api' shared service.
     *
     * @return \Symfony\Component\Security\Http\Authenticator\JsonLoginAuthenticator
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Authenticator/AuthenticatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Authenticator/InteractiveAuthenticatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Authenticator/JsonLoginAuthenticator.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Authentication/AuthenticationSuccessHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Authentication/CustomAuthenticationSuccessHandler.php';
        include_once \dirname(__DIR__, 4).'/src/Security/CustomerAuthenticationSuccessHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Authentication/AuthenticationFailureHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Authentication/CustomAuthenticationFailureHandler.php';
        include_once \dirname(__DIR__, 4).'/src/Security/AuthenticationFailureHandler.php';

        $a = ($container->privates['App\\Security\\JWTManager'] ?? $container->load('getJWTManagerService'));

        if (isset($container->privates['security.authenticator.json_login.customer_api'])) {
            return $container->privates['security.authenticator.json_login.customer_api'];
        }
        $b = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        if (isset($container->privates['security.authenticator.json_login.customer_api'])) {
            return $container->privates['security.authenticator.json_login.customer_api'];
        }

        $container->privates['security.authenticator.json_login.customer_api'] = $instance = new \Symfony\Component\Security\Http\Authenticator\JsonLoginAuthenticator(($container->privates['security.http_utils'] ?? $container->load('getSecurity_HttpUtilsService')), ($container->privates['security.user.provider.concrete.customer_users'] ?? $container->load('getSecurity_User_Provider_Concrete_CustomerUsersService')), new \Symfony\Component\Security\Http\Authentication\CustomAuthenticationSuccessHandler(new \App\Security\CustomerAuthenticationSuccessHandler($a, $b, ($container->privates['monolog.logger'] ?? $container->load('getMonolog_LoggerService'))), [], 'customer_api'), new \Symfony\Component\Security\Http\Authentication\CustomAuthenticationFailureHandler(new \App\Security\AuthenticationFailureHandler(), []), ['check_path' => '/api/v1/customer/login', 'username_path' => 'email', 'password_path' => 'password', 'use_forward' => false, 'login_path' => '/login'], ($container->privates['property_accessor'] ?? self::getPropertyAccessorService($container)));

        if ($container->has('translator')) {
            $instance->setTranslator(($container->services['translator'] ?? self::getTranslatorService($container)));
        }

        return $instance;
    }
}
