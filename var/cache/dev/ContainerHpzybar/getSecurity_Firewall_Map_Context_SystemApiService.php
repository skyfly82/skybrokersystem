<?php

namespace ContainerHpzybar;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSecurity_Firewall_Map_Context_SystemApiService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'security.firewall.map.context.system_api' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-bundle/Security/FirewallContext.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Util/TargetPathTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Firewall/ExceptionListener.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-bundle/Security/FirewallConfig.php';

        $a = ($container->privates['security.authenticator.jwt.system_api'] ?? $container->load('getSecurity_Authenticator_Jwt_SystemApiService'));

        if (isset($container->privates['security.firewall.map.context.system_api'])) {
            return $container->privates['security.firewall.map.context.system_api'];
        }

        return $container->privates['security.firewall.map.context.system_api'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['security.channel_listener'] ?? $container->load('getSecurity_ChannelListenerService'));
            yield 1 => ($container->privates['debug.security.firewall.authenticator.system_api'] ?? $container->load('getDebug_Security_Firewall_Authenticator_SystemApiService'));
            yield 2 => ($container->privates['security.access_listener'] ?? $container->load('getSecurity_AccessListenerService'));
        }, 3), new \Symfony\Component\Security\Http\Firewall\ExceptionListener(($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), ($container->privates['security.authentication.trust_resolver'] ??= new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver()), ($container->privates['security.http_utils'] ?? $container->load('getSecurity_HttpUtilsService')), 'system_api', $a, NULL, NULL, ($container->privates['monolog.logger.security'] ?? self::getMonolog_Logger_SecurityService($container)), true), NULL, new \Symfony\Bundle\SecurityBundle\Security\FirewallConfig('system_api', 'security.user_checker', '.security.request_matcher.VlJYd_f', true, true, 'security.user.provider.concrete.system_users', NULL, 'security.authenticator.jwt.system_api', NULL, NULL, ['jwt', 'json_login'], NULL, NULL));
    }
}
